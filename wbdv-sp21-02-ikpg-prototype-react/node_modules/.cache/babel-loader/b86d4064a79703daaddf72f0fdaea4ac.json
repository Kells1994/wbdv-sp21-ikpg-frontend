{"ast":null,"code":"const fs = require('fs');\n\nconst readline = require('readline');\n\nconst {\n  google\n} = require('google');\n\nconst SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];\nconst TOKEN_PATH = 'token.json';\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err);\n  authorize(JSON.parse(content), listMajors);\n});\n\nfunction authorize(credentials, callback) {\n  const {\n    client_secret,\n    client_id,\n    redirect_uris\n  } = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n\nfunction getNewToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES\n  });\n  console.log('Authorize this app by visiting:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.question('Enter code from that page: ', code => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error while trying to retrieve access token', err);\n      oAuth2Client.setCredentials(token);\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), err => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/psgom/Documents/School/2019-2020_Northeastern/S4_Spring2021/CS5610_WebDev/Assignments/Project/Prototype/wbdv-sp21-ikpg-frontend/wbdv-sp21-02-ikpg-prototype-react/src/services/gsheets-service.js"],"names":["fs","require","readline","google","SCOPES","TOKEN_PATH","readFile","err","content","console","log","authorize","JSON","parse","listMajors","credentials","callback","client_secret","client_id","redirect_uris","installed","oAuth2Client","auth","OAuth2","token","getNewToken","setCredentials","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","writeFile","stringify"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,QAAD,CAA1B;;AAEA,MAAMG,MAAM,GAAG,CAAC,uDAAD,CAAf;AACA,MAAMC,UAAU,GAAG,YAAnB;AAEAL,EAAE,CAACM,QAAH,CAAY,kBAAZ,EAAgC,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAChD,MAAID,GAAJ,EAAS,OAAOE,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDH,GAAjD,CAAP;AACTI,EAAAA,SAAS,CAACC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAD,EAAsBM,UAAtB,CAAT;AACD,CAHD;;AAKA,SAASH,SAAT,CAAmBI,WAAnB,EAAgCC,QAAhC,EAA0C;AACxC,QAAM;AAACC,IAAAA,aAAD;AAAgBC,IAAAA,SAAhB;AAA2BC,IAAAA;AAA3B,MAA4CJ,WAAW,CAACK,SAA9D;AACA,QAAMC,YAAY,GAAG,IAAIlB,MAAM,CAACmB,IAAP,CAAYC,MAAhB,CACnBL,SADmB,EACRD,aADQ,EACOE,aAAa,CAAC,CAAD,CADpB,CAArB;AAGAnB,EAAAA,EAAE,CAACM,QAAH,CAAYD,UAAZ,EAAwB,CAACE,GAAD,EAAMiB,KAAN,KAAgB;AACtC,QAAIjB,GAAJ,EAAS,OAAOkB,WAAW,CAACJ,YAAD,EAAeL,QAAf,CAAlB;AACTK,IAAAA,YAAY,CAACK,cAAb,CAA4Bd,IAAI,CAACC,KAAL,CAAWW,KAAX,CAA5B;AACAR,IAAAA,QAAQ,CAACK,YAAD,CAAR;AACD,GAJD;AAKD;;AAED,SAASI,WAAT,CAAqBJ,YAArB,EAAmCL,QAAnC,EAA6C;AAC3C,QAAMW,OAAO,GAAGN,YAAY,CAACO,eAAb,CAA6B;AAC3CC,IAAAA,WAAW,EAAE,SAD8B;AAE3CC,IAAAA,KAAK,EAAE1B;AAFoC,GAA7B,CAAhB;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CiB,OAA/C;AACA,QAAMI,EAAE,GAAG7B,QAAQ,CAAC8B,eAAT,CAAyB;AAClCC,IAAAA,KAAK,EAAEC,OAAO,CAACC,KADmB;AAElCC,IAAAA,MAAM,EAAEF,OAAO,CAACG;AAFkB,GAAzB,CAAX;AAIAN,EAAAA,EAAE,CAACO,QAAH,CAAY,6BAAZ,EAA4CC,IAAD,IAAS;AAClDR,IAAAA,EAAE,CAACS,KAAH;AACAnB,IAAAA,YAAY,CAACoB,QAAb,CAAsBF,IAAtB,EAA4B,CAAChC,GAAD,EAAMiB,KAAN,KAAgB;AAC1C,UAAIjB,GAAJ,EAAS,OAAOE,OAAO,CAACiC,KAAR,CAAc,6CAAd,EAA6DnC,GAA7D,CAAP;AACTc,MAAAA,YAAY,CAACK,cAAb,CAA4BF,KAA5B;AACAxB,MAAAA,EAAE,CAAC2C,SAAH,CAAatC,UAAb,EAAyBO,IAAI,CAACgC,SAAL,CAAepB,KAAf,CAAzB,EAAiDjB,GAAD,IAAS;AACvD,YAAIA,GAAJ,EAAS,OAAOE,OAAO,CAACiC,KAAR,CAAcnC,GAAd,CAAP;AACTE,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,UAA/B;AACD,OAHD;AAIAW,MAAAA,QAAQ,CAACK,YAAD,CAAR;AACD,KARD;AASD,GAXD;AAYD","sourcesContent":["const fs = require('fs');\r\nconst readline = require('readline');\r\nconst { google } = require('google');\r\n\r\nconst SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];\r\nconst TOKEN_PATH = 'token.json';\r\n\r\nfs.readFile('credentials.json', (err, content) => {\r\n  if (err) return console.log('Error loading client secret file:', err);\r\n  authorize(JSON.parse(content), listMajors);\r\n});\r\n\r\nfunction authorize(credentials, callback) {\r\n  const {client_secret, client_id, redirect_uris} = credentials.installed;\r\n  const oAuth2Client = new google.auth.OAuth2(\r\n    client_id, client_secret, redirect_uris[0]);\r\n\r\n  fs.readFile(TOKEN_PATH, (err, token) => {\r\n    if (err) return getNewToken(oAuth2Client, callback);\r\n    oAuth2Client.setCredentials(JSON.parse(token));\r\n    callback(oAuth2Client);\r\n  });\r\n}\r\n\r\nfunction getNewToken(oAuth2Client, callback) {\r\n  const authUrl = oAuth2Client.generateAuthUrl({\r\n    access_type: 'offline',\r\n    scope: SCOPES,\r\n  });\r\n  console.log('Authorize this app by visiting:', authUrl);\r\n  const rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n  });\r\n  rl.question('Enter code from that page: ', (code) =>{\r\n    rl.close();\r\n    oAuth2Client.getToken(code, (err, token) => {\r\n      if (err) return console.error('Error while trying to retrieve access token', err);\r\n      oAuth2Client.setCredentials(token);\r\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\r\n        if (err) return console.error(err);\r\n        console.log('Token stored to', TOKEN_PATH);\r\n      });\r\n      callback(oAuth2Client);\r\n    });\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}